/*
Heap sort (Ascending)
Avg. Time complexity: O(n log n)
*/

sort ( ) {
	int size = input.length

	for ( int i = size/2 - 1 to 0 )
		heapify ( size, i )

	for ( int i = size - 1 to 0 ) {
		swap input [ i ] & input [ 0 ]
		heapify ( i, 0 )
	}
}

heapify ( int n, int i ) {
	int largest = i
	int left = 2i + 1
	int right = 2i + 2

	// if left child is larger than root 
	if ( left < n && input [ largest ] < input [ left ] )
		largest = left

	// if right child is larger than largest found 
	if ( right < n && input [ largest ] < input [ right ] )
		largest = right

	// if the largest element is not root 
	if ( largest != i ) {
		swap input [ i ] & input [ largest ]
		heapify ( n, largest )
	}
}