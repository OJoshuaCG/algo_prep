/*
Heap sort (Descending)
Avg. Time complexity: O(n log n)
*/

sort ( ) {
	int size = input.length

	for ( int i = size/2 - 1 to 0 )
		heapify ( size, i )

	for ( int i = size - 1 to 0 ) {
		swap input [ i ] & input [ 0 ]
		heapify ( i, 0 )
	}
}

heapify ( int n, int i ) {
	int smallest = i
	int left = 2i + 1
	int right = 2i + 2

	// if left child is smaller than root 
	if ( left < n && input [ smallest ] > input [ left ] )
		smallest = left

	// if right child is smaller than smallest found 
	if ( right < n && input [ smallest ] > input [ right ] )
		smallest = right

	// if the smallest element is not root 
	if ( smallest != i ) {
		swap input [ i ] & input [ smallest ]
		heapify ( n, smallest )
	}
}

